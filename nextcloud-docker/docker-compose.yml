volumes:
  nextcloud:
  db:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2:

x-minio-common: &minio-common
  image: quay.io/minio/minio:latest
  command: server --console-address ":9001" http://minio{1...4}/data{1...2}
  expose:
    - "9000"
    - "9001"
  environment:
    - MINIO_ROOT_USER=minioadmin
    - MINIO_ROOT_PASSWORD=minioadmin

  healthcheck:
    test: ["CMD", "mc", "ready", "local"]
    interval: 5s
    timeout: 5s
    retries: 5

services:

  jupyter-https-portal:
    container_name: nextcloud-local-jupyterhub-https-portal
    image: steveltn/https-portal:1
    ports:
      - '9080:80'
      - '9443:443'
    links:
      - jupyterhub
    restart: always
    environment:
      STAGE: local
      DOMAINS: 'localhost -> http://jupyterhub:8000'

  rds-https-portal:
    container_name: nextcloud-local-rds-https-portal
    image: steveltn/https-portal:1
    ports:
      - '7080:80'
      - '7443:443'
    links:
      - frontend
    restart: always
    environment:
      STAGE: local
      DOMAINS: 'localhost -> http://frontend:6969'

  app:
    container_name: nextcloud-local
    image: nextcloud:latest
    restart: always
    expose:
      - "80"
      - "443"
    ports:
      - 443:8443
      - 80:80
    links:
      - db
    volumes:
      - nextcloud:/var/www/html

      - type: bind
        source: /tmp/nextcloud-ssl.conf
        target: /etc/apache2/mods-enabled/nextcloud.conf
      - type: bind
        source: /tmp/nextcloud-8443.conf
        target: /etc/apache2/sites-enabled/nextcloud.conf
      - type: bind
        source: /tmp/localhost.pem
        target: /etc/ssl/private/localhost.pem
    environment:
      - MYSQL_PASSWORD=userpass
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_HOST=db

  db:
    container_name: nextcloud-local-db
    image: mariadb:latest
    restart: always
    command: --transaction-isolation=READ-COMMITTED --log-bin=binlog --binlog-format=ROW
    volumes:
      - db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=rootpass
      - MYSQL_PASSWORD=userpass
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud

  whiteboard-server:
    container_name: nextcloud-local-whiteboard
    image: ghcr.io/nextcloud-releases/whiteboard:release
    ports:
      - 3002:3002
    environment:
      - NEXTCLOUD_URL=http://localhost:8080
      - JWT_SECRET_KEY=some-random-key

  jupyterhub:
    container_name: nextcloud-local-jupyterhub
    ports:
        - 8100:8000
    image: jupyterhub-local
    # command: jupyterhub
    # volumes:
    #   - type: bind
    #     source: jupyter/refresh-token.py
    #     target: /usr/local/etc/jupyterhub/refresh-token.py
    #   - type: bind
    #     source: jupyter/jupyter_server_config.py
    #     target: /home/jovyan/.jupyter/jupyter_server_config.py

    # extra_hosts:
    #     - "nextcloud-local-mock-oauth:127.0.0.1"

    environment:
      - HUB_SERVICE_HOST=localhost
      - HUB_SERVICE_PORT_REFRESH_TOKEN=refresh-token
      - NEXTCLOUD_HOST=nextcloud-local:443
      - NEXTCLOUD_CLIENT_ID=
      - NEXTCLOUD_CLIENT_SECRET=
      - JUPYTER_HOST=localhost:8100

  mock-oauth2-server:
    container_name: nextcloud-local-mock-oauth
    image: ghcr.io/navikt/mock-oauth2-server:2.1.1
    stdin_open: true
    tty: true
    ports:
        - 8080:8080

  minio1:
    <<: *minio-common
    container_name: nextcloud-local-minio1
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2

  minio2:
    <<: *minio-common
    container_name: nextcloud-local-minio2
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2

  minio3:
    <<: *minio-common
    container_name: nextcloud-local-minio3
    hostname: minio3
    volumes:
      - data3-1:/data1
      - data3-2:/data2

  minio4:
    <<: *minio-common
    container_name: nextcloud-local-minio4
    hostname: minio4
    volumes:
      - data4-1:/data1
      - data4-2:/data2

  nginx:
    container_name: nextcloud-local-minio
    image: nginx:latest
    hostname: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4

### RDS NG ###
  # -- Base images --
  # Build-only Python base image
  py-base:
      image: rds-ng/py-base:develop
      build:
          context: rds-ng/
          dockerfile: deployment/containers/py-base/dev.Dockerfile
      deploy:
          mode: replicated
          replicas: 0

  # Build-only Node base image
  node-base:
      image: rds-ng/node-base:develop
      build:
          context: rds-ng/
          dockerfile: deployment/containers/node-base/dev.Dockerfile
      deploy:
          mode: replicated
          replicas: 0

  # -- Component images --
  # Server service
  server:
      image: rds-ng/server:develop
      volumes:
          -   type: bind
              source: rds-ng/src
              target: /component
          -   type: bind
              source: rds-ng/.data
              target: /data
      build:
          context: rds-ng/
          dockerfile: deployment/containers/backend-component/dev.Dockerfile
          args:
              COMPONENT_NAME: "server"
      depends_on:
          - py-base
      ports:
          - "4200:6969"
      env_file:
          - rds-ng/deployment/env/dev.server.env

  # Connector: OSF
  connector-osf:
      image: rds-ng/connector-osf:develop
      volumes:
          -   type: bind
              source: rds-ng/src
              target: /component
          -   type: bind
              source: rds-ng/.data
              target: /data
      build:
          context: rds-ng/
          dockerfile: deployment/containers/backend-component/dev.Dockerfile
          args:
              COMPONENT_NAME: "connectors/osf"
      depends_on:
          - py-base
      ports:
          - "4300:6969"
      env_file:
          - rds-ng/deployment/env/dev.connector-osf.env

  # Connector: Zenodo
  connector-zenodo:
      image: rds-ng/connector-zenodo:develop
      volumes:
          -   type: bind
              source: rds-ng/src
              target: /component
          -   type: bind
              source: rds-ng/.data
              target: /data
      build:
          context: rds-ng/
          dockerfile: deployment/containers/backend-component/dev.Dockerfile
          args:
              COMPONENT_NAME: "connectors/zenodo"
      depends_on:
          - py-base
      ports:
          - "4400:6969"
      env_file:
          - rds-ng/deployment/env/dev.connector-zenodo.env

  # Connector: Stub
  connector-stub:
      image: rds-ng/connector-stub:develop
      volumes:
          -   type: bind
              source: rds-ng/src
              target: /component
          -   type: bind
              source: rds-ng/.data
              target: /data
      build:
          context: rds-ng/
          dockerfile: deployment/containers/backend-component/dev.Dockerfile
          args:
              COMPONENT_NAME: "connectors/stub"
      depends_on:
          - py-base
      ports:
          - "4900:6969"
      env_file:
          - rds-ng/deployment/env/dev.connector-stub.env

  # Web frontend
  frontend:
      image: rds-ng/frontend:develop
      container_name: rds-frontend
      volumes:
          -   type: bind
              source: rds-ng/src/frontend/src
              target: /app/frontend/src
          -   type: bind
              source: rds-ng/src/common
              target: /app/common
          - /app/common/node_modules
      build:
          context: rds-ng/
          dockerfile: deployment/containers/web-component/dev.Dockerfile
          args:
              COMPONENT_NAME: "frontend"
      depends_on:
          - node-base
      ports:
          - "8000:6969"
      env_file:
          - rds-ng/deployment/env/dev.frontend.env
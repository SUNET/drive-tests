volumes:
  nextcloud:
  db:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2:

x-minio-common: &minio-common
  image: quay.io/minio/minio:latest
  command: server --console-address ":9001" http://minio{1...4}/data{1...2}
  expose:
    - "9000"
    - "9001"
  environment:
    - MINIO_ROOT_USER=minioadmin
    - MINIO_ROOT_PASSWORD=minioadmin

  healthcheck:
    test: ["CMD", "mc", "ready", "local"]
    interval: 5s
    timeout: 5s
    retries: 5

services:

  nextcloud-https-portal:
    container_name: nextcloud-local-nextcloud-https-portal
    image: steveltn/https-portal:1
    ports:
      - '9083:80'
      - '9443:443'
    links:
      - nextcloud-app
    restart: always
    environment:
      STAGE: local
      DOMAINS: 'localhost -> http://nextcloud-app:80'
    networks:
      - nextcloud-local-network

  jupyter-https-portal:
    container_name: nextcloud-local-jupyterhub-https-portal
    image: steveltn/https-portal:1
    ports:
      - '9084:80'
      - '9444:443'
    links:
      - jupyterhub
    restart: always
    environment:
      STAGE: local
      DOMAINS: 'localhost -> http://jupyterhub:8000'
    networks:
      - nextcloud-local-network

  rds-https-portal:
    container_name: nextcloud-local-rds-https-portal
    image: steveltn/https-portal:1
    ports:
      - '9085:80'
      - '9445:443'
    links:
      - frontend
    restart: always
    environment:
      STAGE: local
      DOMAINS: 'localhost -> http://frontend:6969'
    networks:
      - nextcloud-local-network

  oauth-https-portal:
    container_name: nextcloud-local-oauth-https-portal
    image: steveltn/https-portal:1
    ports:
      - '9086:80'
      - '9446:443'
    links:
      - mock-oauth2-server
    restart: always
    environment:
      STAGE: local
      DOMAINS: 'localhost -> http://mock-oauth2-server:8880'
    networks:
      - nextcloud-local-network

  collabora-https-portal:
    container_name: nextcloud-local-collabora-https-portal
    image: steveltn/https-portal:1
    ports:
      - '9087:80'
      - '9447:443'
    links:
      - nextcloud-app
    restart: always
    environment:
      STAGE: local
      DOMAINS: 'localhost -> http://collabora-server:9980'
    networks:
      - nextcloud-local-network

  nextcloud-app:
    container_name: nextcloud-local
    image: nextcloud:latest
    restart: always
    expose:
      - 8080:80
      - "8080"
      - "8443"
    ports:
      - 8443:8443
      - 8080:80
      - 80:80
    links:
      - db
      - collabora-server
    volumes:
      - nextcloud:/var/www/html

      - type: bind
        source: /tmp/nextcloud-ssl.conf
        target: /etc/apache2/mods-enabled/nextcloud.conf
      - type: bind
        source: /tmp/nextcloud-8443.conf
        target: /etc/apache2/sites-enabled/nextcloud.conf
      - type: bind
        source: /tmp/localhost.pem
        target: /etc/ssl/private/localhost.pem
    environment:
      - MYSQL_PASSWORD=userpass
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_HOST=db
    networks:
      - nextcloud-local-network

  db:
    container_name: nextcloud-local-db
    image: mariadb:latest
    restart: always
    command: --transaction-isolation=READ-COMMITTED --log-bin=binlog --binlog-format=ROW
    volumes:
      - db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=rootpass
      - MYSQL_PASSWORD=userpass
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
    networks:
      - nextcloud-local-network

  collabora-server:
    image: collabora/code:latest
    container_name: collabora-server
    restart: always
    expose:
      - "9980"
    ports:
      - 9980:9980
    environment:
      # https://sdk.collaboraonline.com/docs/installation/CODE_Docker_image.html
      # - aliasgroup1=${NEXTCLOUD1}
      # - aliasgroup2=${NEXTCLOUD2}
      # - aliasgroup3=${NEXTCLOUD3}
      - dictionaries=de_DE en_US es_ES ru
      - VIRTUAL_PROTO=http
      - VIRTUAL_PORT=9980
      - VIRTUAL_HOST=collabora
      - extra_params=--o:ssl.enable=false --o:ssl.termination=true --o:user_interface.mode=compact --o:net.proto=IPv4 --o:hexify_embedded_urls=true --o:logging.level=warning
      - username=admin
      - password=adminpassword
    networks:
      - nextcloud-local-network

  whiteboard-server:
    container_name: nextcloud-local-whiteboard
    image: ghcr.io/nextcloud-releases/whiteboard:release
    ports:
      - 3002:3002
    environment:
      - NEXTCLOUD_URL=https://localhost
      - JWT_SECRET_KEY=some-random-key
    networks:
      - nextcloud-local-network

  jupyterhub:
    container_name: nextcloud-local-jupyterhub
    ports:
        - 8100:8000
        - 8081:8081
        - 8082:8082
    image: jupyterhub-local
    environment:
      - HUB_SERVICE_HOST=nextcloud-local-jupyterhub
      - HUB_SERVICE_PORT_REFRESH_TOKEN=8082
      - NEXTCLOUD_HOST=nextcloud-local
      - NEXTCLOUD_CLIENT_ID=AdHJg6nsDeNdYGYxHfisUojXHYw7YBx4SR7DjRWIB8E9FFdfwky21tO7pD9uJ6sV
      - NEXTCLOUD_CLIENT_SECRET=9belLuRY4h12UsHWMO6kO3IhH01EiLeueNprnTe1PyhxKiMW6vnKfKAQpzJ3qUbT
      - JUPYTERHUB_CRYPT_KEY=4195e318e435326c21739c3b398d841592c780e824320f1729be43ff56b15681
      - JUPYTER_HOST=nextcloud-local-jupyterhub
      - JUPYTER_PORT=9444
      - JUPYTERHUB_API_KEY=randomapikey
      - JUPYTERHUB_SERVICE_URL=http://nextcloud-local-jupyterhub:8100
      # Prepare for DockerSpawner
      # This username will be a JupyterHub admin
      - JUPYTERHUB_ADMIN=admin
      # All containers will join this network
      - DOCKER_NETWORK_NAME=jupyterhub-network
      # JupyterHub will spawn this Notebook image for users
      # - DOCKER_NOTEBOOK_IMAGE=quay.io/jupyter/base-notebook:latest
      - DOCKER_NOTEBOOK_IMAGE=jupyterhub-local
      # Notebook directory inside user image
      - DOCKER_NOTEBOOK_DIR=/home/jovyan/work
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - nextcloud-local-network

  mock-oauth2-server:
    container_name: nextcloud-local-mock-oauth
    image: ghcr.io/navikt/mock-oauth2-server:2.1.1
    stdin_open: true
    tty: true
    ports:
        - 8880:8880
    environment:
      - SERVER_PORT=8880
    networks:
      - nextcloud-local-network

  minio1:
    <<: *minio-common
    container_name: nextcloud-local-minio1
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2
    networks:
      - nextcloud-local-network

  minio2:
    <<: *minio-common
    container_name: nextcloud-local-minio2
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2
    networks:
      - nextcloud-local-network

  minio3:
    <<: *minio-common
    container_name: nextcloud-local-minio3
    hostname: minio3
    volumes:
      - data3-1:/data1
      - data3-2:/data2
    networks:
      - nextcloud-local-network

  minio4:
    <<: *minio-common
    container_name: nextcloud-local-minio4
    hostname: minio4
    volumes:
      - data4-1:/data1
      - data4-2:/data2
    networks:
      - nextcloud-local-network

  nginx:
    container_name: nextcloud-local-minio
    image: nginx:latest
    hostname: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4
    networks:
      - nextcloud-local-network

### RDS NG ###
  # -- Base images --
  # Build-only Python base image
  py-base:
    image: rds-ng/py-base:develop
    build:
        context: rds-ng/
        dockerfile: deployment/containers/py-base/dev.Dockerfile
    deploy:
        mode: replicated
        replicas: 0
    networks:
      - nextcloud-local-network

  # Build-only Node base image
  node-base:
    image: rds-ng/node-base:develop
    build:
        context: rds-ng/
        dockerfile: deployment/containers/node-base/dev.Dockerfile
    deploy:
        mode: replicated
        replicas: 0
    networks:
      - nextcloud-local-network

  # -- Component images --
  # Server service
  server:
    image: rds-ng/server:develop
    volumes:
        -   type: bind
            source: rds-ng/src
            target: /component
        -   type: bind
            source: rds-ng/.data
            target: /data
    build:
        context: rds-ng/
        dockerfile: deployment/containers/backend-component/dev.Dockerfile
        args:
            COMPONENT_NAME: "server"
    depends_on:
        - py-base
    ports:
        - "4200:6969"
    env_file:
        - rds-ng/deployment/env/dev.server.env
    networks:
      - nextcloud-local-network

  # Connector: OSF
  connector-osf:
    image: rds-ng/connector-osf:develop
    volumes:
        -   type: bind
            source: rds-ng/src
            target: /component
        -   type: bind
            source: rds-ng/.data
            target: /data
    build:
        context: rds-ng/
        dockerfile: deployment/containers/backend-component/dev.Dockerfile
        args:
            COMPONENT_NAME: "connectors/osf"
    depends_on:
        - py-base
    ports:
        - "4300:6969"
    env_file:
        - rds-ng/deployment/env/dev.connector-osf.env
    networks:
      - nextcloud-local-network

  # Connector: Zenodo
  connector-zenodo:
    image: rds-ng/connector-zenodo:develop
    volumes:
        -   type: bind
            source: rds-ng/src
            target: /component
        -   type: bind
            source: rds-ng/.data
            target: /data
    build:
        context: rds-ng/
        dockerfile: deployment/containers/backend-component/dev.Dockerfile
        args:
            COMPONENT_NAME: "connectors/zenodo"
    depends_on:
        - py-base
    ports:
        - "4400:6969"
    env_file:
        - rds-ng/deployment/env/dev.connector-zenodo.env
    networks:
      - nextcloud-local-network

  # Connector: Stub
  connector-stub:
    image: rds-ng/connector-stub:develop
    volumes:
        -   type: bind
            source: rds-ng/src
            target: /component
        -   type: bind
            source: rds-ng/.data
            target: /data
    build:
        context: rds-ng/
        dockerfile: deployment/containers/backend-component/dev.Dockerfile
        args:
            COMPONENT_NAME: "connectors/stub"
    depends_on:
        - py-base
    ports:
        - "4900:6969"
    env_file:
        - rds-ng/deployment/env/dev.connector-stub.env
    networks:
      - nextcloud-local-network

  # Web frontend
  frontend:
    image: rds-ng/frontend:develop
    container_name: rds-frontend
    volumes:
        -   type: bind
            source: rds-ng/src/frontend/src
            target: /app/frontend/src
        -   type: bind
            source: rds-ng/src/common
            target: /app/common
        - /app/common/node_modules
    build:
        context: rds-ng/
        dockerfile: deployment/containers/web-component/dev.Dockerfile
        args:
            COMPONENT_NAME: "frontend"
    depends_on:
        - node-base
    ports:
        - "8000:6969"
    env_file:
        - rds-ng/deployment/env/dev.frontend.env
    networks:
      - nextcloud-local-network

networks:
  nextcloud-local-network:
    name: nextcloud-local-network